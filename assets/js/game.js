// Navigation

// When Start button is clicked it hides the main menu, then shows the game view and back/menu icons
$('.start-btn').click(function() {
    $('.main-menu').addClass('d-none');
    $('.game-view, .back-and-menu-icons').removeClass('d-none');
});

// When How To Play/ Help link is clicked it hides the main menu, menu list, then game view and shows the help menu
$('.help-menu-link').click(function() {
    $('.main-menu, .menu-list, .game-view').addClass('d-none');
    $('.help-menu, .back-and-menu-icons').removeClass('d-none');
});

// When the Main Menu link is clicked in the menu list it hides the menu list and back/menu icons, then shows the main menu
$('.main-menu-link').click(function() {
    $('.menu-list, .back-and-menu-icons').addClass('d-none');
    $('.main-menu').removeClass('d-none');
});

// When the 3 stacked bars icon is clicked it hides the help menu and game view, then shows the menu list
$('.fa-bars').click(function() {
    $('.help-menu, .game-view').addClass('d-none');
    $('.back-and-menu-icons, .menu-list').removeClass('d-none');
});

/*
    When back arrow icon is clicked
    if game view is not the current window it hides help menu, menu list and main menu, then shows game view
    else it hides the game view, back/menu icons, then shows main menu
*/
$('.fa-arrow-left').click(function() {
    if (!$('.game-view').hasClass('d-none')) {
        $('.game-view, .back-and-menu-icons').addClass('d-none');
        $('.main-menu').removeClass('d-none');
    }
    else {
        $('.main-menu, .menu-list, .help-menu').addClass('d-none');
        $('.game-view, .back-and-menu-icons').removeClass('d-none');
    }
});


// Game

/* 
    Creates a game object with an array (currentGame) which keeps track of the sequence of symbols generated by the game,
    and an array (player) which keeps track of what symbols the player chooses,
    and another array (symbolsArray) which contains all the possible choices of symbols,
    a counter (count) to keep track of the amount of symbols successfully chosen, this is also the score
*/
var game = {
    currentGame: [],
    player: [],
    symbolsArray: ['#green', '#blue', '#orange', '#purple', '#yellow'],
    count: 0
};

/* 
    This function highlights the symbol/currentGame value so the user can see
    which image they have to click
*/
function highlightSelections() {
    for (let i = 0; i < game.currentGame.length; i++) {
        console.log('this is the i number' + i);
        console.log('this is game.currentGame[i] befoe timeout' + game.currentGame[i]);

        /*
            When the variable i is equal to 0 then the outer setTimeout method will last 0 seconds
            because if the time was multiplied by i it would last the same amount of time as when
            the variable i equals 1. This would cause the first and second currentGame value to
            display at the same time. So instead, this instantly shows the first currentGame value.
        */
        if (i == 0) {
            setTimeout(() => {
                $(game.currentGame[i]).addClass('highlight');
                setTimeout(function() {
                    console.log('this is game.currentGame[i] inside timeout' + game.currentGame[i]);
                    $(game.currentGame[i]).removeClass('highlight');
                    console.log('first setting');
                }, 1000);
            }, 0);
            /*
                When variable i is equal to anything besides 0 the setTimeout methods will multiply
                i by 1000. This will show the currentGame values 1 second after each other.
            */
        }
        else {
            setTimeout(() => {
                $(game.currentGame[i]).addClass('highlight');
                setTimeout(function() {
                    console.log('this is game.currentGame[i] inside timeout' + game.currentGame[i]);
                    $(game.currentGame[i]).removeClass('highlight');
                    console.log('second setting');
                }, i * 1000);
            }, i * 1000);
        }
    }
}

/*
    Uses the Math object to generate a random number with a max length of the symbolsArray,
    then calls a function to highlight the selected symbols (highlightSelections())
*/
function generateMove() {
    game.currentGame.push(game.symbolsArray[Math.floor(Math.random() * game.symbolsArray.length)]);
    highlightSelections();
}

/*  
    Changes the score to match the counter (game.count), adds 1 onto counter
    and calls a function that generates the game move (generateMove())
*/
function addCount() {
    $('#scoreNumber').html(game.count);
    game.count++;
    generateMove();
}

// Resets all of the currentGame, player, and count to 0 or empty, then calls the counter function (addCount())
function newGame() {
    game.currentGame = [];
    game.count = 0;
    addCount();
}

$('.start-btn').click(function() {
    if (!$('.game-view').hasClass('d-none')) {
        newGame();
    }
});
